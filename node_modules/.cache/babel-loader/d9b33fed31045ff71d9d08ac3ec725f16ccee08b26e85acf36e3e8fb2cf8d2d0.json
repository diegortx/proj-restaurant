{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\n\n// root state object.\n// each Vuex instance is just a single state tree.\nconst state = {\n  tables: [{\n    id: 1,\n    hour: '00:00',\n    value: 'R$ 00,00'\n  }, {\n    id: 2,\n    hour: '00:00',\n    value: 'R$ 00,00'\n  }]\n};\n\n// mutations are operations that actually mutate the state.\n// each mutation handler gets the entire state tree as the\n// first argument, followed by additional payload arguments.\n// mutations must be synchronous and can be recorded by plugins\n// for debugging purposes.\nconst mutations = {\n  increment(state) {\n    state.count++;\n  },\n  decrement(state) {\n    state.count--;\n  }\n};\n\n// actions are functions that cause side effects and can involve\n// asynchronous operations.\nconst actions = {\n  increment: ({\n    commit\n  }) => commit('increment'),\n  decrement: ({\n    commit\n  }) => commit('decrement')\n};\n\n// getters are functions.\nconst getters = {\n  evenOrOdd: state => state.count % 2 === 0 ? 'even' : 'odd'\n};\n\n// A Vuex instance is created by combining the state, mutations, actions,\n// and getters.\nexport default new Vuex.Store({\n  state,\n  getters,\n  actions,\n  mutations\n});","map":{"version":3,"names":["Vue","Vuex","use","state","tables","id","hour","value","mutations","increment","count","decrement","actions","commit","getters","evenOrOdd","Store"],"sources":["/media/diego/bkp-diego/estudos/senior-frontend-assessment/proj-sen/src/store/store.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// root state object.\n// each Vuex instance is just a single state tree.\nconst state = {\n    tables: [{\n            id: 1,\n            hour: '00:00',\n            value: 'R$ 00,00',\n        },\n        {\n            id: 2,\n            hour: '00:00',\n            value: 'R$ 00,00',\n        },\n    ],\n}\n\n// mutations are operations that actually mutate the state.\n// each mutation handler gets the entire state tree as the\n// first argument, followed by additional payload arguments.\n// mutations must be synchronous and can be recorded by plugins\n// for debugging purposes.\nconst mutations = {\n    increment(state) {\n        state.count++\n    },\n    decrement(state) {\n        state.count--\n    }\n}\n\n// actions are functions that cause side effects and can involve\n// asynchronous operations.\nconst actions = {\n    increment: ({\n        commit\n    }) => commit('increment'),\n    decrement: ({\n        commit\n    }) => commit('decrement'),\n}\n\n// getters are functions.\nconst getters = {\n    evenOrOdd: state => state.count % 2 === 0 ? 'even' : 'odd'\n}\n\n// A Vuex instance is created by combining the state, mutations, actions,\n// and getters.\nexport default new Vuex.Store({\n    state,\n    getters,\n    actions,\n    mutations\n})"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AAEvBD,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC;;AAEb;AACA;AACA,MAAME,KAAK,GAAG;EACVC,MAAM,EAAE,CAAC;IACDC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE;EACX,CAAC,EACD;IACIF,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE;EACX,CAAC;AAET,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG;EACdC,SAAS,CAACN,KAAK,EAAE;IACbA,KAAK,CAACO,KAAK,EAAE;EACjB,CAAC;EACDC,SAAS,CAACR,KAAK,EAAE;IACbA,KAAK,CAACO,KAAK,EAAE;EACjB;AACJ,CAAC;;AAED;AACA;AACA,MAAME,OAAO,GAAG;EACZH,SAAS,EAAE,CAAC;IACRI;EACJ,CAAC,KAAKA,MAAM,CAAC,WAAW,CAAC;EACzBF,SAAS,EAAE,CAAC;IACRE;EACJ,CAAC,KAAKA,MAAM,CAAC,WAAW;AAC5B,CAAC;;AAED;AACA,MAAMC,OAAO,GAAG;EACZC,SAAS,EAAEZ,KAAK,IAAIA,KAAK,CAACO,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG;AACzD,CAAC;;AAED;AACA;AACA,eAAe,IAAIT,IAAI,CAACe,KAAK,CAAC;EAC1Bb,KAAK;EACLW,OAAO;EACPF,OAAO;EACPJ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}