{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\n\n// root state object.\n// each Vuex instance is just a single state tree.\nconst state = {\n  tables: [{\n    id: 1,\n    hour: '00:00',\n    value: 0,\n    payment: [],\n    order: {\n      products: [{\n        name: 'Cerveja Preta',\n        price: 10,\n        count: 0\n      }, {\n        name: 'Taça de vinho',\n        price: 12,\n        count: 0\n      }, {\n        name: 'Caipirinha',\n        price: 13,\n        count: 0\n      }]\n    }\n  }, {\n    id: 2,\n    hour: '00:00',\n    value: 0,\n    payment: [],\n    order: {\n      produtos: [{\n        name: 'Cerveja Preta',\n        price: 10,\n        count: 0\n      }, {\n        name: 'Taça de vinho',\n        price: 12,\n        count: 0\n      }, {\n        name: 'Caipirinha',\n        price: 13,\n        count: 0\n      }]\n    }\n  }, {\n    id: 3,\n    hour: '00:00',\n    value: 0,\n    payment: [],\n    order: {\n      produtos: [{\n        name: 'Cerveja Preta',\n        price: 10,\n        count: 0\n      }, {\n        name: 'Taça de vinho',\n        price: 12,\n        count: 0\n      }, {\n        name: 'Caipirinha',\n        price: 13,\n        count: 0\n      }]\n    }\n  }, {\n    id: 4,\n    hour: '00:00',\n    value: 0,\n    payment: [],\n    order: {\n      produtos: [{\n        name: 'Cerveja Preta',\n        price: 10,\n        count: 0\n      }, {\n        name: 'Taça de vinho',\n        price: 12,\n        count: 0\n      }, {\n        name: 'Caipirinha',\n        price: 13,\n        count: 0\n      }]\n    }\n  }, {\n    id: 5,\n    hour: '00:00',\n    value: 0,\n    payment: [],\n    order: {\n      produtos: [{\n        name: 'Cerveja Preta',\n        price: 10,\n        count: 0\n      }, {\n        name: 'Taça de vinho',\n        price: 12,\n        count: 0\n      }, {\n        name: 'Caipirinha',\n        price: 13,\n        count: 0\n      }]\n    }\n  }]\n};\n\n// mutations are operations that actually mutate the state.\n// each mutation handler gets the entire state tree as the\n// first argument, followed by additional payload arguments.\n// mutations must be synchronous and can be recorded by plugins\n// for debugging purposes.\nconst mutations = {\n  setCount: (state, payload) => {\n    const {\n      id,\n      value,\n      hour\n    } = payload;\n    const table = state.tables.find(table => table.id === id);\n    table.value = value;\n    if (table.hour == '00:00') table.hour = hour;\n    if (value == 0) table.hour = '00:00';\n  },\n  setPayments: (state, payload) => {\n    const {\n      id,\n      date,\n      value\n    } = payload;\n    const table = state.tables.find(table => table.id === id);\n    table.value = table.value - value;\n    table.payment.push({\n      date: date,\n      value: value\n    });\n  },\n  closeTable: (state, payload) => {\n    const {\n      id\n    } = payload;\n    const table = state.tables.find(table => table.id === id);\n    table.hour = '00:00', table.value = 0, table.payment = [], table.order = {\n      products: [{\n        name: 'Cerveja Preta',\n        price: 10,\n        count: 0\n      }, {\n        name: 'Taça de vinho',\n        price: 12,\n        count: 0\n      }, {\n        name: 'Caipirinha',\n        price: 13,\n        count: 0\n      }]\n    };\n  }\n};\n\n// actions are functions that cause side effects and can involve\n// asynchronous operations.\nconst actions = {\n  addItem({\n    commit\n  }, item) {\n    commit('pushItem', item);\n  }\n};\n\n// getters are functions.\nconst getters = {\n  tableList: state => {\n    return state.items;\n  }\n};\n\n// A Vuex instance is created by combining the state, mutations, actions,\n// and getters.\nexport default new Vuex.Store({\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n});","map":{"version":3,"names":["Vue","Vuex","use","state","tables","id","hour","value","payment","order","products","name","price","count","produtos","mutations","setCount","payload","table","find","setPayments","date","push","closeTable","actions","addItem","commit","item","getters","tableList","items","Store","namespaced"],"sources":["/media/diego/bkp-diego/estudos/senior-frontend-assessment/proj-sen/src/store/store.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// root state object.\n// each Vuex instance is just a single state tree.\nconst state = {\n    tables: [\n        {\n            id: 1,\n            hour: '00:00',\n            value: 0,\n            payment: [],\n            order: {\n                products: [{\n                        name: 'Cerveja Preta',\n                        price: 10,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Taça de vinho',\n                        price: 12,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Caipirinha',\n                        price: 13,\n                        count: 0\n\n                    }\n                ]\n            }\n\n\n        },\n        {\n            id: 2,\n            hour: '00:00',\n            value: 0,\n            payment: [],\n            order: {\n                produtos: [{\n                        name: 'Cerveja Preta',\n                        price: 10,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Taça de vinho',\n                        price: 12,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Caipirinha',\n                        price: 13,\n                        count: 0\n\n                    }\n                ]\n            }\n        },\n        {\n            id: 3,\n            hour: '00:00',\n            value: 0,\n            payment: [],\n            order: {\n                produtos: [{\n                        name: 'Cerveja Preta',\n                        price: 10,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Taça de vinho',\n                        price: 12,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Caipirinha',\n                        price: 13,\n                        count: 0\n\n                    }\n                ]\n            }\n        },\n        {\n            id: 4,\n            hour: '00:00',\n            value: 0,\n            payment: [],\n            order: {\n                produtos: [{\n                        name: 'Cerveja Preta',\n                        price: 10,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Taça de vinho',\n                        price: 12,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Caipirinha',\n                        price: 13,\n                        count: 0\n\n                    }\n                ]\n            }\n        },\n        {\n            id: 5,\n            hour: '00:00',\n            value: 0,\n            payment: [],\n            order: {\n                produtos: [{\n                        name: 'Cerveja Preta',\n                        price: 10,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Taça de vinho',\n                        price: 12,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Caipirinha',\n                        price: 13,\n                        count: 0\n\n                    }\n                ]\n            }\n        },\n\n    ],\n}\n\n// mutations are operations that actually mutate the state.\n// each mutation handler gets the entire state tree as the\n// first argument, followed by additional payload arguments.\n// mutations must be synchronous and can be recorded by plugins\n// for debugging purposes.\nconst mutations = {\n    setCount: (state, payload) => {\n        const {\n            id,\n            value,\n            hour\n        } = payload\n        const table = state.tables.find(table => table.id === id)\n        table.value = value\n\n        if (table.hour == '00:00')\n            table.hour = hour\n\n        if (value == 0)\n            table.hour = '00:00'\n    },\n    setPayments: (state, payload) => {\n        const {\n            id,\n            date,\n            value\n        } = payload\n        const table = state.tables.find(table => table.id === id);\n        table.value = table.value - value;\n\n        table.payment.push({\n            date: date,\n            value: value\n        })\n\n    },\n    closeTable: (state, payload) => {\n        const {\n            id\n        } = payload\n        const table = state.tables.find(table => table.id === id);\n\n        table.hour = '00:00',\n            table.value = 0,\n            table.payment = [],\n            table.order = {\n                products: [{\n                        name: 'Cerveja Preta',\n                        price: 10,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Taça de vinho',\n                        price: 12,\n                        count: 0\n\n                    },\n                    {\n                        name: 'Caipirinha',\n                        price: 13,\n                        count: 0\n\n                    }\n                ]\n            }\n\n    }\n}\n\n// actions are functions that cause side effects and can involve\n// asynchronous operations.\nconst actions = {\n    addItem({\n        commit\n    }, item) {\n        commit('pushItem', item);\n    },\n}\n\n// getters are functions.\nconst getters = {\n    tableList: (state) => {\n        return state.items;\n    },\n}\n\n// A Vuex instance is created by combining the state, mutations, actions,\n// and getters.\nexport default new Vuex.Store({\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}