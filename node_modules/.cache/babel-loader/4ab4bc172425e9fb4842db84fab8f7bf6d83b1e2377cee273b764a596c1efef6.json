{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\n\n// root state object.\n// each Vuex instance is just a single state tree.\nconst state = {\n  tables: [{\n    id: 1,\n    hour: '00:00',\n    value: 'R$ 00,00'\n  }, {\n    id: 2,\n    hour: '00:00',\n    value: 'R$ 00,00'\n  }]\n};\n\n// mutations are operations that actually mutate the state.\n// each mutation handler gets the entire state tree as the\n// first argument, followed by additional payload arguments.\n// mutations must be synchronous and can be recorded by plugins\n// for debugging purposes.\nconst mutations = {\n  increment(state) {\n    state.count++;\n  },\n  decrement(state) {\n    state.count--;\n  }\n};\n\n// actions are functions that cause side effects and can involve\n// asynchronous operations.\nconst actions = {\n  addItem({\n    commit,\n    state\n  }, item) {\n    commit('pushItem', item);\n  }\n};\n\n// getters are functions.\nconst getters = {\n  tableList: state => {\n    return state.items;\n  }\n};\n\n// A Vuex instance is created by combining the state, mutations, actions,\n// and getters.\nexport default new Vuex.Store({\n  state,\n  getters,\n  actions,\n  mutations\n});","map":{"version":3,"names":["Vue","Vuex","use","state","tables","id","hour","value","mutations","increment","count","decrement","actions","addItem","commit","item","getters","tableList","items","Store"],"sources":["/media/diego/bkp-diego/estudos/senior-frontend-assessment/proj-sen/src/store/store.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// root state object.\n// each Vuex instance is just a single state tree.\nconst state = {\n    tables: [{\n            id: 1,\n            hour: '00:00',\n            value: 'R$ 00,00',\n        },\n        {\n            id: 2,\n            hour: '00:00',\n            value: 'R$ 00,00',\n        },\n    ],\n}\n\n// mutations are operations that actually mutate the state.\n// each mutation handler gets the entire state tree as the\n// first argument, followed by additional payload arguments.\n// mutations must be synchronous and can be recorded by plugins\n// for debugging purposes.\nconst mutations = {\n    increment(state) {\n        state.count++\n    },\n    decrement(state) {\n        state.count--\n    }\n}\n\n// actions are functions that cause side effects and can involve\n// asynchronous operations.\nconst actions = {\n    addItem ({ commit, state }, item) {\n        commit('pushItem', item);\n    },\n}\n\n// getters are functions.\nconst getters = {\n    tableList: (state) => {\n        return state.items;\n    },\n}\n\n// A Vuex instance is created by combining the state, mutations, actions,\n// and getters.\nexport default new Vuex.Store({\n    state,\n    getters,\n    actions,\n    mutations\n})"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AAEvBD,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC;;AAEb;AACA;AACA,MAAME,KAAK,GAAG;EACVC,MAAM,EAAE,CAAC;IACDC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE;EACX,CAAC,EACD;IACIF,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE;EACX,CAAC;AAET,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG;EACdC,SAAS,CAACN,KAAK,EAAE;IACbA,KAAK,CAACO,KAAK,EAAE;EACjB,CAAC;EACDC,SAAS,CAACR,KAAK,EAAE;IACbA,KAAK,CAACO,KAAK,EAAE;EACjB;AACJ,CAAC;;AAED;AACA;AACA,MAAME,OAAO,GAAG;EACZC,OAAO,CAAE;IAAEC,MAAM;IAAEX;EAAM,CAAC,EAAEY,IAAI,EAAE;IAC9BD,MAAM,CAAC,UAAU,EAAEC,IAAI,CAAC;EAC5B;AACJ,CAAC;;AAED;AACA,MAAMC,OAAO,GAAG;EACZC,SAAS,EAAGd,KAAK,IAAK;IAClB,OAAOA,KAAK,CAACe,KAAK;EACtB;AACJ,CAAC;;AAED;AACA;AACA,eAAe,IAAIjB,IAAI,CAACkB,KAAK,CAAC;EAC1BhB,KAAK;EACLa,OAAO;EACPJ,OAAO;EACPJ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}